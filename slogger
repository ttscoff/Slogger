#!/usr/bin/env ruby
MAJOR_VERSION = 2.0
MINOR_VERSION = 10
BUILD_NUMBER = 6
require 'open-uri'
require 'net/http'
require 'net/https'
require 'time'
require 'cgi'
require 'rss'
require 'erb'
require 'logger'
require 'optparse'
require 'fileutils'

SLOGGER_HOME = File.dirname(File.expand_path(__FILE__))
ENV['SLOGGER_HOME'] = SLOGGER_HOME

require SLOGGER_HOME + '/lib/sociallogger'
require SLOGGER_HOME + '/lib/configtools'
require SLOGGER_HOME + '/lib/json'

class String
  def markdownify
    contents = ''
    IO.popen('"$SLOGGER_HOME/lib/html2text"', "r+") do |io|

      Thread.new { self.each_line { |line|
        io << line
      }; io.close_write }

      io.each_line do |line|
        contents << line
      end
    end
    contents
  end

  def e_sh
    self.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
  end

end

class Slogger

  attr_accessor :config, :dayonepath, :plugins
  attr_reader :timespan, :log
  def initialize
    cfg = ConfigTools.new({'config_file' => $options[:config_file]})
    @log = Logger.new(STDERR)
    original_formatter = Logger::Formatter.new
    @log.datetime_format = '%d'
    @log.level = 1
    @log.progname = self.class.name
    @log.formatter = proc { |severity, datetime, progname, msg|
      abbr_sev = case severity
        when 'WARN' then "> "
        when 'ERROR' then "! "
        when 'FATAL' then "!!"
        else "  "
      end
      spacer_count = 20 - progname.length
      spacer = ''
      spacer_count.times do
        spacer += ' '
      end
      output = $options[:quiet] ? '' : "#{abbr_sev}#{datetime.strftime('%H:%M:%S')} #{spacer}#{progname}: #{msg}\n"
      output
    }

    @template = self.template
    @plugins = []

    if cfg.config_exists?
      @config = cfg.load_config
      if @config.nil?
        raise "Config should not be nil"
        Process.exit(-1)
      end
    end
    if $options[:since_last_run] && @config.key?('last_run_time') && !@config['last_run_time'].nil?
      @timespan = Time.parse(@config['last_run_time'])
    else
      @timespan = Time.now - ((60 * 60 * 24) * $options[:timespan])
    end
    @config['image_filename_is_title'] ||= false
  end

  def undo_slogger(count = 1)
    runlog = SLOGGER_HOME+'/runlog.txt'
    if File.exists?(runlog)
      undo_to = ''
      File.open(runlog,'r') do |f|
        runs = f.read.split(/\n/)
        if runs.length >= count
          undo_to = runs[count*-1].match(/^\[(.*?)\]/)[1]
        end
      end
      $stderr.puts undo_to
      tnow = Time.now
      elapsed = tnow - Time.parse(undo_to) # elapsed time in seconds
      files = %x{find "#{self.storage_path}" -newerct '#{elapsed.floor} seconds ago' -type f}.split(/\n/)
      files.each do |file|
        FileUtils.mv(file,ENV['HOME']+'/.Trash/')
      end
      @log.info("Moved #{files.length} entries to Trash")
    else
      @log.fatal("Run log does not exist.")
      Process.exit(-1)
    end
  end

  def log_run
    File.open(SLOGGER_HOME+'/runlog.txt', 'a') { |f|
      f.puts "[#{Time.now.strftime('%c')}] Slogger v#{MAJOR_VERSION} (#{MAJOR_VERSION}.#{MINOR_VERSION}.#{BUILD_NUMBER}) #{$options.inspect}"
    }
  end

  def storage_path
  	if @config.key?('storage')
	    if @config['storage'].downcase == 'icloud'
	      dayonedir = %x{ls ~/Library/Mobile\\ Documents/|grep dayoneapp}.strip
	      full_path = File.expand_path("~/Library/Mobile\ Documents/#{dayonedir}/Documents/Journal_dayone/")
	      if File.exists?(full_path)
	        return full_path
	      else
	        raise "Failed to find iCloud storage path"
	        Process.exit(-1)
	      end
	    elsif File.exists?(File.expand_path(@config['storage']))
	      return File.expand_path(@config['storage'])
	    else
        raise "Path for Day One journal is not specified or doesn't exist. Change your path in slogger_config and run ./slogger again: #{@config['storage']}"
	      Process.exit(-1)
	    end
	else
	  raise "Path for Day One journal is not specified or doesn't exist. Change your path in slogger_config and run ./slogger again: #{@config['storage']}"
	  return
	end
  end

  def run_plugins
    @config['last_run_time'] = Time.now.strftime('%c')
    new_options = false
    plugin_dir = $options[:develop] ? "/plugins_develop/*.rb" : "/plugins/*.rb"
    Dir[SLOGGER_HOME + plugin_dir].each do |file|
      if $options[:onlyrun]
        $options[:onlyrun].each { |plugin_frag|
          if File.basename(file) =~ /^#{plugin_frag}/i
            require file
          end
        }
      else
        require file
      end
    end
    @plugins.each do |plugin|
      _namespace = plugin['class'].to_s

      @config[_namespace] ||= {}
      plugin['config'].each do |k,v|
        if @config[_namespace][k].nil?
          new_options = true
          @config[_namespace][k] ||= v
        end
        @config[_namespace][_namespace+"_last_run"] = Time.now.strftime('%c')
      end
      # ConfigTools.new.dump_config(@config)
      eval(plugin['class']).new.do_log
    end
    ConfigTools.new({'config_file' => $options[:config_file]}).dump_config(@config)
  end

  def register_plugin(plugin)
    @plugins.push plugin
  end

  def template
    ERB.new <<-XMLTEMPLATE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Creation Date</key>
  <date><%= datestamp %></date>
  <key>Entry Text</key>
  <string><%= entry %></string>
  <key>Starred</key>
  <<%= starred %>/>
  <key>UUID</key>
  <string><%= uuid %></string>
</dict>
</plist>
XMLTEMPLATE
  end
end

require SLOGGER_HOME + '/lib/redirect'
require SLOGGER_HOME + '/lib/dayone'

$options = {}
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: slogger [-dq] [-r X] [/path/to/image.jpg]"
  $options[:config_file] = File.expand_path(File.dirname(__FILE__)+'/slogger_config')
  opts.on( '-c', '--config FILE', 'Specify configuration file to use') do |file|
    file = File.expand_path(file)
    $options[:config_file] = file
  end
  $options[:develop] = false
  opts.on( '-d','--develop', 'Develop mode' ) do
    $options[:develop] = true
  end
  $options[:onlyrun] = false
  opts.on( '-o','--onlyrun NAME[,NAME2...]','Only run plugins matching items in comma-delimited string') do |plugin_string|
    $options[:onlyrun] = plugin_string.split(/,/).map {|frag| frag.strip }
  end
  $options[:timespan] = 1
  opts.on( '-t', '--timespan DAYS', 'Days of history to collect') do |days|
    $options[:timespan] = days.to_i
  end
  $options[:quiet] = false
  opts.on( '-q','--quiet', 'Run quietly (no notifications/messages)' ) do
   $options[:quiet] = true
  end
  $options[:max_retries] = 1
  opts.on( '-r','--retries COUNT', 'Maximum number of retries per plugin (int)' ) do |count|
    $options[:max_retries] = count.to_i
  end
  $options[:since_last_run] = false
  opts.on( '-s','--since-last', 'Set the timespan to the last run date' ) do
   $options[:since_last_run] = true
  end
  $options[:undo] = false
  opts.on( '-u', '--undo COUNT', 'Undo the last COUNT runs') do |count|
    $options[:undo] = count.to_i
  end
  opts.on( '-v', '--version', 'Display the version number') do
    $stdout.puts("Slogger version #{MAJOR_VERSION}.#{MINOR_VERSION}.#{BUILD_NUMBER}")
    exit
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

$slog = Slogger.new
$slog.dayonepath = $slog.storage_path

if ARGV.length > 0
  if File.exists?(File.expand_path(ARGV[0]))
    DayOne.new.store_single_photo(ARGV[0],{},true)
  else
    raise "File \"#{ARGV[0]}\" not found."
  end
else
  unless $options[:undo]
    $stdout.puts "Initializing Slogger v#{MAJOR_VERSION} (#{MAJOR_VERSION}.#{MINOR_VERSION}.#{BUILD_NUMBER})..."
    $slog.log_run
    $slog.run_plugins
  else
    $stdout.puts "Undoing the last #{$options[:undo].to_s} runs..."
    $slog.undo_slogger($options[:undo])
  end
end
